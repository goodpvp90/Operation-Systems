#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char* argv[]) {

    int i = 0, rbytes, wbytes;
    char buff[atoi(argv[2])+1];
    if(argc != 4){perror("Not enough arguments"); exit(1);}

    int result = mkdir("encrypted", 0777); // create directory with read, write, and execute permission for all users
    if (result != 0) {
        printf("Failed to create directory\n");
        exit(1);
    }
    printf("Directory created successfully\n");

    int fd1; // declare a file descriptor
    fd1 = open(argv[1], O_RDONLY, 0664);
    if (fd1 == -1) {
        printf("Failed to create file\n");
        return 1;
    }

    int fd2; // declare a file descriptor
    fd2 = open("encrypted/encrypted.txt", O_WRONLY | O_CREAT, 0664); // create a new file in write mode with read and write permission for owner and read permission for others
    if (fd2 == -1) {
         printf("Failed to create file\n");
        return 1;
    }

    if(rbytes = read(fd1,buff, atoi(argv[2])) == -1){perror("Nadirread"); exit(1);}
    while(rbytes>0){
        if( (wbytes = write(fd2, buff, rbytes))== -1){ perror("write"); exit(1); }
        if( wbytes != rbytes ){ perror("bad write"); exit(1); }

        if( (wbytes = write(fd2, argv[3], strlen(argv[3])))== -1){ perror("write"); exit(1); }
          if(rbytes = read(fd1,buff, atoi(argv[2])) == -1){perror("read"); exit(1);}
    }

    close(fd1); // close the file
    close(fd2); // close the file
    return 0;
}
